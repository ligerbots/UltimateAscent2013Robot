// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2877.UltimateAscent2013Robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc2877.UltimateAscent2013Robot.subsystems.*;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar driveTrainJaguarLeftFront;
    public static CANJaguar driveTrainJaguarRightFront;
    public static CANJaguar driveTrainJaguarLeftBack;
    public static CANJaguar driveTrainJaguarRightBack;
    public static RobotDrive driveTrainRobotDrive41;
    public static CANJaguar shooterFrontWheel;
    public static CANJaguar shooterBackWheel;
    public static CANJaguar shooterAngleControl;
    public static AnalogChannel shooterAngleSensor;
    public static Relay acquisitionRoller;

    public static CANJaguar acquisitionScrewlift;
    public static DigitalInput rotaryLimitSwitch;
    public static DigitalInput acquisitionRotaryLimitSwitch;
    public static DigitalInput bottomAcquisitionSwitch;
    public static DigitalInput topAcquisitionSwitch;
    public static boolean limHit=false;
    public static final int JAGUAR_COUNT = 8;
    public static CANJags jags = new CANJags(JAGUAR_COUNT);
   
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
    public static void init() {
        driveTrainJaguarLeftFront = jags.init(2, "Left Front");
        driveTrainJaguarLeftBack = jags.init(3, "Left Back");
        driveTrainJaguarRightBack = jags.init(9, "Right Back");
        driveTrainJaguarRightFront = jags.init(5, "Right Front");
        shooterBackWheel = jags.init(6, "Shooter Back Wheel");
        shooterFrontWheel = jags.init(7, "Shooter Front Wheel");
        acquisitionScrewlift = jags.init(8, "Elevator Coils");
        shooterAngleControl = jags.init(4, "Shooter Tilt");
        if (driveTrainJaguarLeftFront!= null && driveTrainJaguarLeftBack!=null &&
               driveTrainJaguarRightFront!=null &&  driveTrainJaguarRightBack!=null) {
            driveTrainRobotDrive41 = new RobotDrive(driveTrainJaguarLeftFront, driveTrainJaguarLeftBack,
                                                    driveTrainJaguarRightFront, driveTrainJaguarRightBack);
            driveTrainRobotDrive41.setSafetyEnabled(false);
            driveTrainRobotDrive41.setExpiration(10);
            driveTrainRobotDrive41.setSensitivity(0.5);
            driveTrainRobotDrive41.setMaxOutput(1.0);
            driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
            driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        }
        
        acquisitionScrewlift.setSafetyEnabled(false);
        //acquisitionAcquisitionScrewlift.setExpiration(10);
               
        shooterAngleSensor = new AnalogChannel(1);
        //analogSwitchTest1 = new AnalogChannel(8);
        acquisitionRotaryLimitSwitch = new DigitalInput(3);
        bottomAcquisitionSwitch = new DigitalInput(1);
        topAcquisitionSwitch = new DigitalInput(2);
        acquisitionRoller = new Relay(1, Relay.Direction.kBoth);
//        shooterShooterAngleEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
//	LiveWindow.addSensor("Shooter", "Shooter AngleEncoder", shooterShooterAngleEncoder);
//        shooterShooterAngleEncoder.setDistancePerPulse(1.0);
//        shooterShooterAngleEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
//        shooterShooterAngleEncoder.start();
//        acquisitionAcquisitionScrewlift = new Relay(1, 1);
//        LiveWindow.addActuator("Acquisition", "Acquisition Screwlift", acquisitionAcquisitionScrewlift);
        

	LiveWindow.addActuator("Acquisition", "Acquisition Roller", acquisitionRoller);	
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
