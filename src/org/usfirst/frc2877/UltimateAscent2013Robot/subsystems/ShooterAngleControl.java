/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.usfirst.frc2877.UltimateAscent2013Robot.subsystems;

import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2877.UltimateAscent2013Robot.RobotMap;

/**
 *
 * @author Administrator
 */
public class ShooterAngleControl extends Subsystem {
    CANJaguar shooterAngle = RobotMap.shooterAngleControl;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel shooterElevationAngleSensor = RobotMap.shooterAngleSensor;

    // This is the minimum angle of the shooter.
    private final double MIN_ANGLE = 20;
    
    private final double MAX_VOLTAGE = 4.91;
    private final double MIN_VOLTAGE = 0.0;
    private final double POT_RANGE = 300;
    // The zero point of the POT is 150 on the prototype
    private final double MIN_POT_VALUE = 123.5;

    private final double MAX_ANGLE = 50;
    private final double VOLTAGE_RANGE = MAX_VOLTAGE - MIN_VOLTAGE;
    private final double ANGLE_RANGE = MAX_ANGLE - MIN_ANGLE;
    int m_count = 10;
    public double currentShooterAngle;
    public double shooterElevationVoltage;
    
        
    public void ShooterAngleControl() {
        System.out.println("ShooterAngleControl constructed.");
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
     // Current Shooter Angle
    // returns the current shooter angle in radians
    public void shooterElevationAngle() {
        shooterElevationVoltage = RobotMap.shooterAngleSensor.getAverageVoltage();
        // clip the small negative values we get when the POT is at zero
        if (shooterElevationVoltage < 0.0) {shooterElevationVoltage = 0.0;}
        
        // WE DON'T TRY TO ADD MIN_ANGLE HERE BECAUSE WE DON'T KNOW WHERE
        // THE ZERO POINT OF THE POT ACTUALLY IS. So for now, show raw angle.
        //    - Jared, Feb 28
        currentShooterAngle = (POT_RANGE/VOLTAGE_RANGE)*shooterElevationVoltage -
                MIN_POT_VALUE;
        }
    
     public void runShooterAngle(double y) {
        try {
            shooterAngle.setX(-y*1.0);
            /* if (--m_count==0)
            {
               m_count = 10;
               System.out.println("current Shooter angle" + currentShooterAngle);
            } */
        } catch (edu.wpi.first.wpilibj.can.CANTimeoutException ex) {
            System.out.println("Timeout Exception on shooterAngle.setX in runShooterAngle");
        }
    }
    
    // returns true when we're within two degress of the desired angle
    public boolean moveToAngle(double desiredAngle)
    {
        double h = 1.0;
        shooterElevationAngle();
        if (currentShooterAngle <= desiredAngle-1) {
            runShooterAngle(h);
            return false;
        }
        else if (currentShooterAngle >= desiredAngle+1) {
            runShooterAngle(-h);
            return false;
        }
        runShooterAngle(0.0);
        return true;
    }
}
